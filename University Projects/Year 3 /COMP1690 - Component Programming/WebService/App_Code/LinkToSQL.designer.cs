#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSource")]
public partial class LinkToSQLDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertDriver(Driver instance);
  partial void UpdateDriver(Driver instance);
  partial void DeleteDriver(Driver instance);
  partial void InsertDayLog(DayLog instance);
  partial void UpdateDayLog(DayLog instance);
  partial void DeleteDayLog(DayLog instance);
  partial void InsertJourneyLog(JourneyLog instance);
  partial void UpdateJourneyLog(JourneyLog instance);
  partial void DeleteJourneyLog(JourneyLog instance);
  #endregion
	
	public LinkToSQLDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DataSourceConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public LinkToSQLDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public LinkToSQLDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public LinkToSQLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public LinkToSQLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Driver> Drivers
	{
		get
		{
			return this.GetTable<Driver>();
		}
	}
	
	public System.Data.Linq.Table<DayLog> DayLogs
	{
		get
		{
			return this.GetTable<DayLog>();
		}
	}
	
	public System.Data.Linq.Table<JourneyLog> JourneyLogs
	{
		get
		{
			return this.GetTable<JourneyLog>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Driver")]
public partial class Driver : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Driver_Id;
	
	private string _First_Name;
	
	private string _Last_Name;
	
	private string _User_Name;
	
	private string _Password;
	
	private System.Nullable<System.DateTime> _Date_Of_Birth;
	
	private string _PhoneNumber;
	
	private EntitySet<DayLog> _DayLogs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDriver_IdChanging(int value);
    partial void OnDriver_IdChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnDate_Of_BirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_Of_BirthChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
	
	public Driver()
	{
		this._DayLogs = new EntitySet<DayLog>(new Action<DayLog>(this.attach_DayLogs), new Action<DayLog>(this.detach_DayLogs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Driver_Id
	{
		get
		{
			return this._Driver_Id;
		}
		set
		{
			if ((this._Driver_Id != value))
			{
				this.OnDriver_IdChanging(value);
				this.SendPropertyChanging();
				this._Driver_Id = value;
				this.SendPropertyChanged("Driver_Id");
				this.OnDriver_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="VarChar(255)")]
	public string First_Name
	{
		get
		{
			return this._First_Name;
		}
		set
		{
			if ((this._First_Name != value))
			{
				this.OnFirst_NameChanging(value);
				this.SendPropertyChanging();
				this._First_Name = value;
				this.SendPropertyChanged("First_Name");
				this.OnFirst_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="VarChar(255)")]
	public string Last_Name
	{
		get
		{
			return this._Last_Name;
		}
		set
		{
			if ((this._Last_Name != value))
			{
				this.OnLast_NameChanging(value);
				this.SendPropertyChanging();
				this._Last_Name = value;
				this.SendPropertyChanged("Last_Name");
				this.OnLast_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Name", DbType="VarChar(255)")]
	public string User_Name
	{
		get
		{
			return this._User_Name;
		}
		set
		{
			if ((this._User_Name != value))
			{
				this.OnUser_NameChanging(value);
				this.SendPropertyChanging();
				this._User_Name = value;
				this.SendPropertyChanged("User_Name");
				this.OnUser_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(255)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Of_Birth", DbType="Date")]
	public System.Nullable<System.DateTime> Date_Of_Birth
	{
		get
		{
			return this._Date_Of_Birth;
		}
		set
		{
			if ((this._Date_Of_Birth != value))
			{
				this.OnDate_Of_BirthChanging(value);
				this.SendPropertyChanging();
				this._Date_Of_Birth = value;
				this.SendPropertyChanged("Date_Of_Birth");
				this.OnDate_Of_BirthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(15)")]
	public string PhoneNumber
	{
		get
		{
			return this._PhoneNumber;
		}
		set
		{
			if ((this._PhoneNumber != value))
			{
				this.OnPhoneNumberChanging(value);
				this.SendPropertyChanging();
				this._PhoneNumber = value;
				this.SendPropertyChanged("PhoneNumber");
				this.OnPhoneNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_DayLog", Storage="_DayLogs", ThisKey="Driver_Id", OtherKey="Driver_Id")]
	public EntitySet<DayLog> DayLogs
	{
		get
		{
			return this._DayLogs;
		}
		set
		{
			this._DayLogs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DayLogs(DayLog entity)
	{
		this.SendPropertyChanging();
		entity.Driver = this;
	}
	
	private void detach_DayLogs(DayLog entity)
	{
		this.SendPropertyChanging();
		entity.Driver = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DayLog")]
public partial class DayLog : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Day_Id;
	
	private System.Nullable<System.DateTime> _Day_start;
	
	private System.Nullable<System.DateTime> _Day_end;
	
	private System.Nullable<decimal> _Day_duration;
	
	private System.Nullable<int> _Driver_Id;
	
	private EntitySet<JourneyLog> _JourneyLogs;
	
	private EntityRef<Driver> _Driver;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDay_IdChanging(int value);
    partial void OnDay_IdChanged();
    partial void OnDay_startChanging(System.Nullable<System.DateTime> value);
    partial void OnDay_startChanged();
    partial void OnDay_endChanging(System.Nullable<System.DateTime> value);
    partial void OnDay_endChanged();
    partial void OnDay_durationChanging(System.Nullable<decimal> value);
    partial void OnDay_durationChanged();
    partial void OnDriver_IdChanging(System.Nullable<int> value);
    partial void OnDriver_IdChanged();
    #endregion
	
	public DayLog()
	{
		this._JourneyLogs = new EntitySet<JourneyLog>(new Action<JourneyLog>(this.attach_JourneyLogs), new Action<JourneyLog>(this.detach_JourneyLogs));
		this._Driver = default(EntityRef<Driver>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Day_Id
	{
		get
		{
			return this._Day_Id;
		}
		set
		{
			if ((this._Day_Id != value))
			{
				this.OnDay_IdChanging(value);
				this.SendPropertyChanging();
				this._Day_Id = value;
				this.SendPropertyChanged("Day_Id");
				this.OnDay_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day_start", DbType="DateTime")]
	public System.Nullable<System.DateTime> Day_start
	{
		get
		{
			return this._Day_start;
		}
		set
		{
			if ((this._Day_start != value))
			{
				this.OnDay_startChanging(value);
				this.SendPropertyChanging();
				this._Day_start = value;
				this.SendPropertyChanged("Day_start");
				this.OnDay_startChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day_end", DbType="DateTime")]
	public System.Nullable<System.DateTime> Day_end
	{
		get
		{
			return this._Day_end;
		}
		set
		{
			if ((this._Day_end != value))
			{
				this.OnDay_endChanging(value);
				this.SendPropertyChanging();
				this._Day_end = value;
				this.SendPropertyChanged("Day_end");
				this.OnDay_endChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day_duration", DbType="Decimal(18,0)")]
	public System.Nullable<decimal> Day_duration
	{
		get
		{
			return this._Day_duration;
		}
		set
		{
			if ((this._Day_duration != value))
			{
				this.OnDay_durationChanging(value);
				this.SendPropertyChanging();
				this._Day_duration = value;
				this.SendPropertyChanged("Day_duration");
				this.OnDay_durationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_Id", DbType="Int")]
	public System.Nullable<int> Driver_Id
	{
		get
		{
			return this._Driver_Id;
		}
		set
		{
			if ((this._Driver_Id != value))
			{
				if (this._Driver.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDriver_IdChanging(value);
				this.SendPropertyChanging();
				this._Driver_Id = value;
				this.SendPropertyChanged("Driver_Id");
				this.OnDriver_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DayLog_JourneyLog", Storage="_JourneyLogs", ThisKey="Day_Id", OtherKey="Day_Id")]
	public EntitySet<JourneyLog> JourneyLogs
	{
		get
		{
			return this._JourneyLogs;
		}
		set
		{
			this._JourneyLogs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_DayLog", Storage="_Driver", ThisKey="Driver_Id", OtherKey="Driver_Id", IsForeignKey=true, DeleteRule="CASCADE")]
	public Driver Driver
	{
		get
		{
			return this._Driver.Entity;
		}
		set
		{
			Driver previousValue = this._Driver.Entity;
			if (((previousValue != value) 
						|| (this._Driver.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Driver.Entity = null;
					previousValue.DayLogs.Remove(this);
				}
				this._Driver.Entity = value;
				if ((value != null))
				{
					value.DayLogs.Add(this);
					this._Driver_Id = value.Driver_Id;
				}
				else
				{
					this._Driver_Id = default(Nullable<int>);
				}
				this.SendPropertyChanged("Driver");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_JourneyLogs(JourneyLog entity)
	{
		this.SendPropertyChanging();
		entity.DayLog = this;
	}
	
	private void detach_JourneyLogs(JourneyLog entity)
	{
		this.SendPropertyChanging();
		entity.DayLog = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JourneyLog")]
public partial class JourneyLog : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Journey_Id;
	
	private System.Nullable<System.DateTime> _Journey_start;
	
	private System.Nullable<System.DateTime> _Journey_end;
	
	private System.Nullable<decimal> _Journey_duration;
	
	private System.Nullable<int> _Day_Id;
	
	private EntityRef<DayLog> _DayLog;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJourney_IdChanging(int value);
    partial void OnJourney_IdChanged();
    partial void OnJourney_startChanging(System.Nullable<System.DateTime> value);
    partial void OnJourney_startChanged();
    partial void OnJourney_endChanging(System.Nullable<System.DateTime> value);
    partial void OnJourney_endChanged();
    partial void OnJourney_durationChanging(System.Nullable<decimal> value);
    partial void OnJourney_durationChanged();
    partial void OnDay_IdChanging(System.Nullable<int> value);
    partial void OnDay_IdChanged();
    #endregion
	
	public JourneyLog()
	{
		this._DayLog = default(EntityRef<DayLog>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Journey_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Journey_Id
	{
		get
		{
			return this._Journey_Id;
		}
		set
		{
			if ((this._Journey_Id != value))
			{
				this.OnJourney_IdChanging(value);
				this.SendPropertyChanging();
				this._Journey_Id = value;
				this.SendPropertyChanged("Journey_Id");
				this.OnJourney_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Journey_start", DbType="DateTime")]
	public System.Nullable<System.DateTime> Journey_start
	{
		get
		{
			return this._Journey_start;
		}
		set
		{
			if ((this._Journey_start != value))
			{
				this.OnJourney_startChanging(value);
				this.SendPropertyChanging();
				this._Journey_start = value;
				this.SendPropertyChanged("Journey_start");
				this.OnJourney_startChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Journey_end", DbType="DateTime")]
	public System.Nullable<System.DateTime> Journey_end
	{
		get
		{
			return this._Journey_end;
		}
		set
		{
			if ((this._Journey_end != value))
			{
				this.OnJourney_endChanging(value);
				this.SendPropertyChanging();
				this._Journey_end = value;
				this.SendPropertyChanged("Journey_end");
				this.OnJourney_endChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Journey_duration", DbType="Decimal(18,0)")]
	public System.Nullable<decimal> Journey_duration
	{
		get
		{
			return this._Journey_duration;
		}
		set
		{
			if ((this._Journey_duration != value))
			{
				this.OnJourney_durationChanging(value);
				this.SendPropertyChanging();
				this._Journey_duration = value;
				this.SendPropertyChanged("Journey_duration");
				this.OnJourney_durationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day_Id", DbType="Int")]
	public System.Nullable<int> Day_Id
	{
		get
		{
			return this._Day_Id;
		}
		set
		{
			if ((this._Day_Id != value))
			{
				if (this._DayLog.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDay_IdChanging(value);
				this.SendPropertyChanging();
				this._Day_Id = value;
				this.SendPropertyChanged("Day_Id");
				this.OnDay_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DayLog_JourneyLog", Storage="_DayLog", ThisKey="Day_Id", OtherKey="Day_Id", IsForeignKey=true, DeleteRule="CASCADE")]
	public DayLog DayLog
	{
		get
		{
			return this._DayLog.Entity;
		}
		set
		{
			DayLog previousValue = this._DayLog.Entity;
			if (((previousValue != value) 
						|| (this._DayLog.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DayLog.Entity = null;
					previousValue.JourneyLogs.Remove(this);
				}
				this._DayLog.Entity = value;
				if ((value != null))
				{
					value.JourneyLogs.Add(this);
					this._Day_Id = value.Day_Id;
				}
				else
				{
					this._Day_Id = default(Nullable<int>);
				}
				this.SendPropertyChanged("DayLog");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
