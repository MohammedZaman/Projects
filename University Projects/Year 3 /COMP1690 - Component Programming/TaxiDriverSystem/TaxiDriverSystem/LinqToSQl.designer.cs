#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TaxiDriverSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataSource")]
	public partial class LinqToSQlDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertDisciplinary(Disciplinary instance);
    partial void UpdateDisciplinary(Disciplinary instance);
    partial void DeleteDisciplinary(Disciplinary instance);
    partial void InsertIncidentType(IncidentType instance);
    partial void UpdateIncidentType(IncidentType instance);
    partial void DeleteIncidentType(IncidentType instance);
    partial void InsertDriver(Driver instance);
    partial void UpdateDriver(Driver instance);
    partial void DeleteDriver(Driver instance);
    partial void InsertTraining(Training instance);
    partial void UpdateTraining(Training instance);
    partial void DeleteTraining(Training instance);
    partial void InsertTrainingSession(TrainingSession instance);
    partial void UpdateTrainingSession(TrainingSession instance);
    partial void DeleteTrainingSession(TrainingSession instance);
    partial void InsertTrainingType(TrainingType instance);
    partial void UpdateTrainingType(TrainingType instance);
    partial void DeleteTrainingType(TrainingType instance);
    partial void InsertDayLog(DayLog instance);
    partial void UpdateDayLog(DayLog instance);
    partial void DeleteDayLog(DayLog instance);
    partial void InsertGeographicalTest(GeographicalTest instance);
    partial void UpdateGeographicalTest(GeographicalTest instance);
    partial void DeleteGeographicalTest(GeographicalTest instance);
    partial void InsertDrivingLicence(DrivingLicence instance);
    partial void UpdateDrivingLicence(DrivingLicence instance);
    partial void DeleteDrivingLicence(DrivingLicence instance);
    #endregion
		
		public LinqToSQlDataContext() : 
				base(global::TaxiDriverSystem.Properties.Settings.Default.DataSourceConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSQlDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSQlDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSQlDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToSQlDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<Disciplinary> Disciplinaries
		{
			get
			{
				return this.GetTable<Disciplinary>();
			}
		}
		
		public System.Data.Linq.Table<IncidentType> IncidentTypes
		{
			get
			{
				return this.GetTable<IncidentType>();
			}
		}
		
		public System.Data.Linq.Table<Driver> Drivers
		{
			get
			{
				return this.GetTable<Driver>();
			}
		}
		
		public System.Data.Linq.Table<Training> Trainings
		{
			get
			{
				return this.GetTable<Training>();
			}
		}
		
		public System.Data.Linq.Table<TrainingSession> TrainingSessions
		{
			get
			{
				return this.GetTable<TrainingSession>();
			}
		}
		
		public System.Data.Linq.Table<TrainingType> TrainingTypes
		{
			get
			{
				return this.GetTable<TrainingType>();
			}
		}
		
		public System.Data.Linq.Table<DayLog> DayLogs
		{
			get
			{
				return this.GetTable<DayLog>();
			}
		}
		
		public System.Data.Linq.Table<GeographicalTest> GeographicalTests
		{
			get
			{
				return this.GetTable<GeographicalTest>();
			}
		}
		
		public System.Data.Linq.Table<DrivingLicence> DrivingLicences
		{
			get
			{
				return this.GetTable<DrivingLicence>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Admin_Id;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		private string _User_Name;
		
		private string _Password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdmin_IdChanging(int value);
    partial void OnAdmin_IdChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Admin()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Admin_Id
		{
			get
			{
				return this._Admin_Id;
			}
			set
			{
				if ((this._Admin_Id != value))
				{
					this.OnAdmin_IdChanging(value);
					this.SendPropertyChanging();
					this._Admin_Id = value;
					this.SendPropertyChanged("Admin_Id");
					this.OnAdmin_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="VarChar(255)")]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="VarChar(255)")]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Name", DbType="VarChar(255)")]
		public string User_Name
		{
			get
			{
				return this._User_Name;
			}
			set
			{
				if ((this._User_Name != value))
				{
					this.OnUser_NameChanging(value);
					this.SendPropertyChanging();
					this._User_Name = value;
					this.SendPropertyChanged("User_Name");
					this.OnUser_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(255)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Disciplinary")]
	public partial class Disciplinary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Disciplinary_Id;
		
		private System.Nullable<int> _IncidentType_Id;
		
		private string _Incident_report;
		
		private System.Nullable<int> _Driver_Id;
		
		private EntityRef<IncidentType> _IncidentType;
		
		private EntityRef<Driver> _Driver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisciplinary_IdChanging(int value);
    partial void OnDisciplinary_IdChanged();
    partial void OnIncidentType_IdChanging(System.Nullable<int> value);
    partial void OnIncidentType_IdChanged();
    partial void OnIncident_reportChanging(string value);
    partial void OnIncident_reportChanged();
    partial void OnDriver_IdChanging(System.Nullable<int> value);
    partial void OnDriver_IdChanged();
    #endregion
		
		public Disciplinary()
		{
			this._IncidentType = default(EntityRef<IncidentType>);
			this._Driver = default(EntityRef<Driver>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disciplinary_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Disciplinary_Id
		{
			get
			{
				return this._Disciplinary_Id;
			}
			set
			{
				if ((this._Disciplinary_Id != value))
				{
					this.OnDisciplinary_IdChanging(value);
					this.SendPropertyChanging();
					this._Disciplinary_Id = value;
					this.SendPropertyChanged("Disciplinary_Id");
					this.OnDisciplinary_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncidentType_Id", DbType="Int")]
		public System.Nullable<int> IncidentType_Id
		{
			get
			{
				return this._IncidentType_Id;
			}
			set
			{
				if ((this._IncidentType_Id != value))
				{
					if (this._IncidentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIncidentType_IdChanging(value);
					this.SendPropertyChanging();
					this._IncidentType_Id = value;
					this.SendPropertyChanged("IncidentType_Id");
					this.OnIncidentType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Incident_report", DbType="VarChar(255)")]
		public string Incident_report
		{
			get
			{
				return this._Incident_report;
			}
			set
			{
				if ((this._Incident_report != value))
				{
					this.OnIncident_reportChanging(value);
					this.SendPropertyChanging();
					this._Incident_report = value;
					this.SendPropertyChanged("Incident_report");
					this.OnIncident_reportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_Id", DbType="Int")]
		public System.Nullable<int> Driver_Id
		{
			get
			{
				return this._Driver_Id;
			}
			set
			{
				if ((this._Driver_Id != value))
				{
					if (this._Driver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriver_IdChanging(value);
					this.SendPropertyChanging();
					this._Driver_Id = value;
					this.SendPropertyChanged("Driver_Id");
					this.OnDriver_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IncidentType_Disciplinary", Storage="_IncidentType", ThisKey="IncidentType_Id", OtherKey="IncidentType_Id", IsForeignKey=true)]
		public IncidentType IncidentType
		{
			get
			{
				return this._IncidentType.Entity;
			}
			set
			{
				IncidentType previousValue = this._IncidentType.Entity;
				if (((previousValue != value) 
							|| (this._IncidentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IncidentType.Entity = null;
						previousValue.Disciplinaries.Remove(this);
					}
					this._IncidentType.Entity = value;
					if ((value != null))
					{
						value.Disciplinaries.Add(this);
						this._IncidentType_Id = value.IncidentType_Id;
					}
					else
					{
						this._IncidentType_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("IncidentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_Disciplinary", Storage="_Driver", ThisKey="Driver_Id", OtherKey="Driver_Id", IsForeignKey=true)]
		public Driver Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				Driver previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.Disciplinaries.Remove(this);
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.Disciplinaries.Add(this);
						this._Driver_Id = value.Driver_Id;
					}
					else
					{
						this._Driver_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IncidentType")]
	public partial class IncidentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IncidentType_Id;
		
		private string _incident_type;
		
		private EntitySet<Disciplinary> _Disciplinaries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIncidentType_IdChanging(int value);
    partial void OnIncidentType_IdChanged();
    partial void Onincident_typeChanging(string value);
    partial void Onincident_typeChanged();
    #endregion
		
		public IncidentType()
		{
			this._Disciplinaries = new EntitySet<Disciplinary>(new Action<Disciplinary>(this.attach_Disciplinaries), new Action<Disciplinary>(this.detach_Disciplinaries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncidentType_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IncidentType_Id
		{
			get
			{
				return this._IncidentType_Id;
			}
			set
			{
				if ((this._IncidentType_Id != value))
				{
					this.OnIncidentType_IdChanging(value);
					this.SendPropertyChanging();
					this._IncidentType_Id = value;
					this.SendPropertyChanged("IncidentType_Id");
					this.OnIncidentType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_incident_type", DbType="VarChar(255)")]
		public string incident_type
		{
			get
			{
				return this._incident_type;
			}
			set
			{
				if ((this._incident_type != value))
				{
					this.Onincident_typeChanging(value);
					this.SendPropertyChanging();
					this._incident_type = value;
					this.SendPropertyChanged("incident_type");
					this.Onincident_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IncidentType_Disciplinary", Storage="_Disciplinaries", ThisKey="IncidentType_Id", OtherKey="IncidentType_Id")]
		public EntitySet<Disciplinary> Disciplinaries
		{
			get
			{
				return this._Disciplinaries;
			}
			set
			{
				this._Disciplinaries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Disciplinaries(Disciplinary entity)
		{
			this.SendPropertyChanging();
			entity.IncidentType = this;
		}
		
		private void detach_Disciplinaries(Disciplinary entity)
		{
			this.SendPropertyChanging();
			entity.IncidentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Driver")]
	public partial class Driver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Driver_Id;
		
		private string _First_Name;
		
		private string _Last_Name;
		
		private string _User_Name;
		
		private string _Password;
		
		private System.Nullable<System.DateTime> _Date_Of_Birth;
		
		private string _PhoneNumber;
		
		private EntitySet<Disciplinary> _Disciplinaries;
		
		private EntitySet<Training> _Trainings;
		
		private EntitySet<DayLog> _DayLogs;
		
		private EntitySet<GeographicalTest> _GeographicalTests;
		
		private EntitySet<DrivingLicence> _DrivingLicences;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDriver_IdChanging(int value);
    partial void OnDriver_IdChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnDate_Of_BirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_Of_BirthChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public Driver()
		{
			this._Disciplinaries = new EntitySet<Disciplinary>(new Action<Disciplinary>(this.attach_Disciplinaries), new Action<Disciplinary>(this.detach_Disciplinaries));
			this._Trainings = new EntitySet<Training>(new Action<Training>(this.attach_Trainings), new Action<Training>(this.detach_Trainings));
			this._DayLogs = new EntitySet<DayLog>(new Action<DayLog>(this.attach_DayLogs), new Action<DayLog>(this.detach_DayLogs));
			this._GeographicalTests = new EntitySet<GeographicalTest>(new Action<GeographicalTest>(this.attach_GeographicalTests), new Action<GeographicalTest>(this.detach_GeographicalTests));
			this._DrivingLicences = new EntitySet<DrivingLicence>(new Action<DrivingLicence>(this.attach_DrivingLicences), new Action<DrivingLicence>(this.detach_DrivingLicences));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Driver_Id
		{
			get
			{
				return this._Driver_Id;
			}
			set
			{
				if ((this._Driver_Id != value))
				{
					this.OnDriver_IdChanging(value);
					this.SendPropertyChanging();
					this._Driver_Id = value;
					this.SendPropertyChanged("Driver_Id");
					this.OnDriver_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="VarChar(255)")]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="VarChar(255)")]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Name", DbType="VarChar(255)")]
		public string User_Name
		{
			get
			{
				return this._User_Name;
			}
			set
			{
				if ((this._User_Name != value))
				{
					this.OnUser_NameChanging(value);
					this.SendPropertyChanging();
					this._User_Name = value;
					this.SendPropertyChanged("User_Name");
					this.OnUser_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(255)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Of_Birth", DbType="Date")]
		public System.Nullable<System.DateTime> Date_Of_Birth
		{
			get
			{
				return this._Date_Of_Birth;
			}
			set
			{
				if ((this._Date_Of_Birth != value))
				{
					this.OnDate_Of_BirthChanging(value);
					this.SendPropertyChanging();
					this._Date_Of_Birth = value;
					this.SendPropertyChanged("Date_Of_Birth");
					this.OnDate_Of_BirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(15)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_Disciplinary", Storage="_Disciplinaries", ThisKey="Driver_Id", OtherKey="Driver_Id")]
		public EntitySet<Disciplinary> Disciplinaries
		{
			get
			{
				return this._Disciplinaries;
			}
			set
			{
				this._Disciplinaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_Training", Storage="_Trainings", ThisKey="Driver_Id", OtherKey="Driver_Id")]
		public EntitySet<Training> Trainings
		{
			get
			{
				return this._Trainings;
			}
			set
			{
				this._Trainings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_DayLog", Storage="_DayLogs", ThisKey="Driver_Id", OtherKey="Driver_Id")]
		public EntitySet<DayLog> DayLogs
		{
			get
			{
				return this._DayLogs;
			}
			set
			{
				this._DayLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_GeographicalTest", Storage="_GeographicalTests", ThisKey="Driver_Id", OtherKey="Driver_Id")]
		public EntitySet<GeographicalTest> GeographicalTests
		{
			get
			{
				return this._GeographicalTests;
			}
			set
			{
				this._GeographicalTests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_DrivingLicence", Storage="_DrivingLicences", ThisKey="Driver_Id", OtherKey="Driver_Id")]
		public EntitySet<DrivingLicence> DrivingLicences
		{
			get
			{
				return this._DrivingLicences;
			}
			set
			{
				this._DrivingLicences.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Disciplinaries(Disciplinary entity)
		{
			this.SendPropertyChanging();
			entity.Driver = this;
		}
		
		private void detach_Disciplinaries(Disciplinary entity)
		{
			this.SendPropertyChanging();
			entity.Driver = null;
		}
		
		private void attach_Trainings(Training entity)
		{
			this.SendPropertyChanging();
			entity.Driver = this;
		}
		
		private void detach_Trainings(Training entity)
		{
			this.SendPropertyChanging();
			entity.Driver = null;
		}
		
		private void attach_DayLogs(DayLog entity)
		{
			this.SendPropertyChanging();
			entity.Driver = this;
		}
		
		private void detach_DayLogs(DayLog entity)
		{
			this.SendPropertyChanging();
			entity.Driver = null;
		}
		
		private void attach_GeographicalTests(GeographicalTest entity)
		{
			this.SendPropertyChanging();
			entity.Driver = this;
		}
		
		private void detach_GeographicalTests(GeographicalTest entity)
		{
			this.SendPropertyChanging();
			entity.Driver = null;
		}
		
		private void attach_DrivingLicences(DrivingLicence entity)
		{
			this.SendPropertyChanging();
			entity.Driver = this;
		}
		
		private void detach_DrivingLicences(DrivingLicence entity)
		{
			this.SendPropertyChanging();
			entity.Driver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Training")]
	public partial class Training : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Training_Id;
		
		private System.Nullable<bool> _Status;
		
		private System.Nullable<int> _TrainingSession_Id;
		
		private System.Nullable<int> _Driver_Id;
		
		private EntityRef<Driver> _Driver;
		
		private EntityRef<TrainingSession> _TrainingSession;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTraining_IdChanging(int value);
    partial void OnTraining_IdChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    partial void OnTrainingSession_IdChanging(System.Nullable<int> value);
    partial void OnTrainingSession_IdChanged();
    partial void OnDriver_IdChanging(System.Nullable<int> value);
    partial void OnDriver_IdChanged();
    #endregion
		
		public Training()
		{
			this._Driver = default(EntityRef<Driver>);
			this._TrainingSession = default(EntityRef<TrainingSession>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Training_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Training_Id
		{
			get
			{
				return this._Training_Id;
			}
			set
			{
				if ((this._Training_Id != value))
				{
					this.OnTraining_IdChanging(value);
					this.SendPropertyChanging();
					this._Training_Id = value;
					this.SendPropertyChanged("Training_Id");
					this.OnTraining_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingSession_Id", DbType="Int")]
		public System.Nullable<int> TrainingSession_Id
		{
			get
			{
				return this._TrainingSession_Id;
			}
			set
			{
				if ((this._TrainingSession_Id != value))
				{
					if (this._TrainingSession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingSession_IdChanging(value);
					this.SendPropertyChanging();
					this._TrainingSession_Id = value;
					this.SendPropertyChanged("TrainingSession_Id");
					this.OnTrainingSession_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_Id", DbType="Int")]
		public System.Nullable<int> Driver_Id
		{
			get
			{
				return this._Driver_Id;
			}
			set
			{
				if ((this._Driver_Id != value))
				{
					if (this._Driver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriver_IdChanging(value);
					this.SendPropertyChanging();
					this._Driver_Id = value;
					this.SendPropertyChanged("Driver_Id");
					this.OnDriver_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_Training", Storage="_Driver", ThisKey="Driver_Id", OtherKey="Driver_Id", IsForeignKey=true)]
		public Driver Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				Driver previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.Trainings.Remove(this);
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.Trainings.Add(this);
						this._Driver_Id = value.Driver_Id;
					}
					else
					{
						this._Driver_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingSession_Training", Storage="_TrainingSession", ThisKey="TrainingSession_Id", OtherKey="TrainingSession_Id", IsForeignKey=true)]
		public TrainingSession TrainingSession
		{
			get
			{
				return this._TrainingSession.Entity;
			}
			set
			{
				TrainingSession previousValue = this._TrainingSession.Entity;
				if (((previousValue != value) 
							|| (this._TrainingSession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingSession.Entity = null;
						previousValue.Trainings.Remove(this);
					}
					this._TrainingSession.Entity = value;
					if ((value != null))
					{
						value.Trainings.Add(this);
						this._TrainingSession_Id = value.TrainingSession_Id;
					}
					else
					{
						this._TrainingSession_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("TrainingSession");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrainingSession")]
	public partial class TrainingSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrainingSession_Id;
		
		private System.Nullable<System.DateTime> _Date_of_session;
		
		private System.Nullable<System.DateTime> _Start_Time;
		
		private System.Nullable<System.DateTime> _End_Time;
		
		private System.Nullable<System.DateTime> _Expiry_Date;
		
		private System.Nullable<int> _TrainingType_Id;
		
		private EntitySet<Training> _Trainings;
		
		private EntityRef<TrainingType> _TrainingType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainingSession_IdChanging(int value);
    partial void OnTrainingSession_IdChanged();
    partial void OnDate_of_sessionChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_of_sessionChanged();
    partial void OnStart_TimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStart_TimeChanged();
    partial void OnEnd_TimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEnd_TimeChanged();
    partial void OnExpiry_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiry_DateChanged();
    partial void OnTrainingType_IdChanging(System.Nullable<int> value);
    partial void OnTrainingType_IdChanged();
    #endregion
		
		public TrainingSession()
		{
			this._Trainings = new EntitySet<Training>(new Action<Training>(this.attach_Trainings), new Action<Training>(this.detach_Trainings));
			this._TrainingType = default(EntityRef<TrainingType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingSession_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrainingSession_Id
		{
			get
			{
				return this._TrainingSession_Id;
			}
			set
			{
				if ((this._TrainingSession_Id != value))
				{
					this.OnTrainingSession_IdChanging(value);
					this.SendPropertyChanging();
					this._TrainingSession_Id = value;
					this.SendPropertyChanged("TrainingSession_Id");
					this.OnTrainingSession_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_of_session", DbType="Date")]
		public System.Nullable<System.DateTime> Date_of_session
		{
			get
			{
				return this._Date_of_session;
			}
			set
			{
				if ((this._Date_of_session != value))
				{
					this.OnDate_of_sessionChanging(value);
					this.SendPropertyChanging();
					this._Date_of_session = value;
					this.SendPropertyChanged("Date_of_session");
					this.OnDate_of_sessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_Time", DbType="Date")]
		public System.Nullable<System.DateTime> Start_Time
		{
			get
			{
				return this._Start_Time;
			}
			set
			{
				if ((this._Start_Time != value))
				{
					this.OnStart_TimeChanging(value);
					this.SendPropertyChanging();
					this._Start_Time = value;
					this.SendPropertyChanged("Start_Time");
					this.OnStart_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_End_Time", DbType="Date")]
		public System.Nullable<System.DateTime> End_Time
		{
			get
			{
				return this._End_Time;
			}
			set
			{
				if ((this._End_Time != value))
				{
					this.OnEnd_TimeChanging(value);
					this.SendPropertyChanging();
					this._End_Time = value;
					this.SendPropertyChanged("End_Time");
					this.OnEnd_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expiry_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Expiry_Date
		{
			get
			{
				return this._Expiry_Date;
			}
			set
			{
				if ((this._Expiry_Date != value))
				{
					this.OnExpiry_DateChanging(value);
					this.SendPropertyChanging();
					this._Expiry_Date = value;
					this.SendPropertyChanged("Expiry_Date");
					this.OnExpiry_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingType_Id", DbType="Int")]
		public System.Nullable<int> TrainingType_Id
		{
			get
			{
				return this._TrainingType_Id;
			}
			set
			{
				if ((this._TrainingType_Id != value))
				{
					if (this._TrainingType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainingType_IdChanging(value);
					this.SendPropertyChanging();
					this._TrainingType_Id = value;
					this.SendPropertyChanged("TrainingType_Id");
					this.OnTrainingType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingSession_Training", Storage="_Trainings", ThisKey="TrainingSession_Id", OtherKey="TrainingSession_Id")]
		public EntitySet<Training> Trainings
		{
			get
			{
				return this._Trainings;
			}
			set
			{
				this._Trainings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingType_TrainingSession", Storage="_TrainingType", ThisKey="TrainingType_Id", OtherKey="TrainingType_Id", IsForeignKey=true)]
		public TrainingType TrainingType
		{
			get
			{
				return this._TrainingType.Entity;
			}
			set
			{
				TrainingType previousValue = this._TrainingType.Entity;
				if (((previousValue != value) 
							|| (this._TrainingType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TrainingType.Entity = null;
						previousValue.TrainingSessions.Remove(this);
					}
					this._TrainingType.Entity = value;
					if ((value != null))
					{
						value.TrainingSessions.Add(this);
						this._TrainingType_Id = value.TrainingType_Id;
					}
					else
					{
						this._TrainingType_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("TrainingType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Trainings(Training entity)
		{
			this.SendPropertyChanging();
			entity.TrainingSession = this;
		}
		
		private void detach_Trainings(Training entity)
		{
			this.SendPropertyChanging();
			entity.TrainingSession = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrainingType")]
	public partial class TrainingType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrainingType_Id;
		
		private string _Training_name;
		
		private EntitySet<TrainingSession> _TrainingSessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainingType_IdChanging(int value);
    partial void OnTrainingType_IdChanged();
    partial void OnTraining_nameChanging(string value);
    partial void OnTraining_nameChanged();
    #endregion
		
		public TrainingType()
		{
			this._TrainingSessions = new EntitySet<TrainingSession>(new Action<TrainingSession>(this.attach_TrainingSessions), new Action<TrainingSession>(this.detach_TrainingSessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainingType_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrainingType_Id
		{
			get
			{
				return this._TrainingType_Id;
			}
			set
			{
				if ((this._TrainingType_Id != value))
				{
					this.OnTrainingType_IdChanging(value);
					this.SendPropertyChanging();
					this._TrainingType_Id = value;
					this.SendPropertyChanged("TrainingType_Id");
					this.OnTrainingType_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Training_name", DbType="VarChar(255)")]
		public string Training_name
		{
			get
			{
				return this._Training_name;
			}
			set
			{
				if ((this._Training_name != value))
				{
					this.OnTraining_nameChanging(value);
					this.SendPropertyChanging();
					this._Training_name = value;
					this.SendPropertyChanged("Training_name");
					this.OnTraining_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TrainingType_TrainingSession", Storage="_TrainingSessions", ThisKey="TrainingType_Id", OtherKey="TrainingType_Id")]
		public EntitySet<TrainingSession> TrainingSessions
		{
			get
			{
				return this._TrainingSessions;
			}
			set
			{
				this._TrainingSessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrainingSessions(TrainingSession entity)
		{
			this.SendPropertyChanging();
			entity.TrainingType = this;
		}
		
		private void detach_TrainingSessions(TrainingSession entity)
		{
			this.SendPropertyChanging();
			entity.TrainingType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DayLog")]
	public partial class DayLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Day_Id;
		
		private System.Nullable<System.DateTime> _Day_start;
		
		private System.Nullable<System.DateTime> _Day_end;
		
		private System.Nullable<decimal> _Day_duration;
		
		private System.Nullable<int> _Driver_Id;
		
		private EntityRef<Driver> _Driver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDay_IdChanging(int value);
    partial void OnDay_IdChanged();
    partial void OnDay_startChanging(System.Nullable<System.DateTime> value);
    partial void OnDay_startChanged();
    partial void OnDay_endChanging(System.Nullable<System.DateTime> value);
    partial void OnDay_endChanged();
    partial void OnDay_durationChanging(System.Nullable<decimal> value);
    partial void OnDay_durationChanged();
    partial void OnDriver_IdChanging(System.Nullable<int> value);
    partial void OnDriver_IdChanged();
    #endregion
		
		public DayLog()
		{
			this._Driver = default(EntityRef<Driver>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Day_Id
		{
			get
			{
				return this._Day_Id;
			}
			set
			{
				if ((this._Day_Id != value))
				{
					this.OnDay_IdChanging(value);
					this.SendPropertyChanging();
					this._Day_Id = value;
					this.SendPropertyChanged("Day_Id");
					this.OnDay_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day_start", DbType="DateTime")]
		public System.Nullable<System.DateTime> Day_start
		{
			get
			{
				return this._Day_start;
			}
			set
			{
				if ((this._Day_start != value))
				{
					this.OnDay_startChanging(value);
					this.SendPropertyChanging();
					this._Day_start = value;
					this.SendPropertyChanged("Day_start");
					this.OnDay_startChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day_end", DbType="DateTime")]
		public System.Nullable<System.DateTime> Day_end
		{
			get
			{
				return this._Day_end;
			}
			set
			{
				if ((this._Day_end != value))
				{
					this.OnDay_endChanging(value);
					this.SendPropertyChanging();
					this._Day_end = value;
					this.SendPropertyChanged("Day_end");
					this.OnDay_endChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day_duration", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Day_duration
		{
			get
			{
				return this._Day_duration;
			}
			set
			{
				if ((this._Day_duration != value))
				{
					this.OnDay_durationChanging(value);
					this.SendPropertyChanging();
					this._Day_duration = value;
					this.SendPropertyChanged("Day_duration");
					this.OnDay_durationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_Id", DbType="Int")]
		public System.Nullable<int> Driver_Id
		{
			get
			{
				return this._Driver_Id;
			}
			set
			{
				if ((this._Driver_Id != value))
				{
					if (this._Driver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriver_IdChanging(value);
					this.SendPropertyChanging();
					this._Driver_Id = value;
					this.SendPropertyChanged("Driver_Id");
					this.OnDriver_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_DayLog", Storage="_Driver", ThisKey="Driver_Id", OtherKey="Driver_Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Driver Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				Driver previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.DayLogs.Remove(this);
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.DayLogs.Add(this);
						this._Driver_Id = value.Driver_Id;
					}
					else
					{
						this._Driver_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeographicalTest")]
	public partial class GeographicalTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GeoTest_Id;
		
		private string _Location;
		
		private System.Nullable<System.DateTime> _Expiry_date;
		
		private System.Nullable<decimal> _Score;
		
		private System.Nullable<int> _Driver_Id;
		
		private EntityRef<Driver> _Driver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGeoTest_IdChanging(int value);
    partial void OnGeoTest_IdChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnExpiry_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiry_dateChanged();
    partial void OnScoreChanging(System.Nullable<decimal> value);
    partial void OnScoreChanged();
    partial void OnDriver_IdChanging(System.Nullable<int> value);
    partial void OnDriver_IdChanged();
    #endregion
		
		public GeographicalTest()
		{
			this._Driver = default(EntityRef<Driver>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GeoTest_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GeoTest_Id
		{
			get
			{
				return this._GeoTest_Id;
			}
			set
			{
				if ((this._GeoTest_Id != value))
				{
					this.OnGeoTest_IdChanging(value);
					this.SendPropertyChanging();
					this._GeoTest_Id = value;
					this.SendPropertyChanged("GeoTest_Id");
					this.OnGeoTest_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(255)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expiry_date", DbType="Date")]
		public System.Nullable<System.DateTime> Expiry_date
		{
			get
			{
				return this._Expiry_date;
			}
			set
			{
				if ((this._Expiry_date != value))
				{
					this.OnExpiry_dateChanging(value);
					this.SendPropertyChanging();
					this._Expiry_date = value;
					this.SendPropertyChanged("Expiry_date");
					this.OnExpiry_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_Id", DbType="Int")]
		public System.Nullable<int> Driver_Id
		{
			get
			{
				return this._Driver_Id;
			}
			set
			{
				if ((this._Driver_Id != value))
				{
					if (this._Driver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriver_IdChanging(value);
					this.SendPropertyChanging();
					this._Driver_Id = value;
					this.SendPropertyChanged("Driver_Id");
					this.OnDriver_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_GeographicalTest", Storage="_Driver", ThisKey="Driver_Id", OtherKey="Driver_Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Driver Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				Driver previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.GeographicalTests.Remove(this);
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.GeographicalTests.Add(this);
						this._Driver_Id = value.Driver_Id;
					}
					else
					{
						this._Driver_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrivingLicence")]
	public partial class DrivingLicence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DrvingLicence_Id;
		
		private string _Driver_number;
		
		private System.Nullable<System.DateTime> _Expiry_date;
		
		private System.Nullable<int> _Driver_Id;
		
		private EntityRef<Driver> _Driver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrvingLicence_IdChanging(int value);
    partial void OnDrvingLicence_IdChanged();
    partial void OnDriver_numberChanging(string value);
    partial void OnDriver_numberChanged();
    partial void OnExpiry_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiry_dateChanged();
    partial void OnDriver_IdChanging(System.Nullable<int> value);
    partial void OnDriver_IdChanged();
    #endregion
		
		public DrivingLicence()
		{
			this._Driver = default(EntityRef<Driver>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrvingLicence_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DrvingLicence_Id
		{
			get
			{
				return this._DrvingLicence_Id;
			}
			set
			{
				if ((this._DrvingLicence_Id != value))
				{
					this.OnDrvingLicence_IdChanging(value);
					this.SendPropertyChanging();
					this._DrvingLicence_Id = value;
					this.SendPropertyChanged("DrvingLicence_Id");
					this.OnDrvingLicence_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_number", DbType="VarChar(250)")]
		public string Driver_number
		{
			get
			{
				return this._Driver_number;
			}
			set
			{
				if ((this._Driver_number != value))
				{
					this.OnDriver_numberChanging(value);
					this.SendPropertyChanging();
					this._Driver_number = value;
					this.SendPropertyChanged("Driver_number");
					this.OnDriver_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expiry_date", DbType="Date")]
		public System.Nullable<System.DateTime> Expiry_date
		{
			get
			{
				return this._Expiry_date;
			}
			set
			{
				if ((this._Expiry_date != value))
				{
					this.OnExpiry_dateChanging(value);
					this.SendPropertyChanging();
					this._Expiry_date = value;
					this.SendPropertyChanged("Expiry_date");
					this.OnExpiry_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_Id", DbType="Int")]
		public System.Nullable<int> Driver_Id
		{
			get
			{
				return this._Driver_Id;
			}
			set
			{
				if ((this._Driver_Id != value))
				{
					if (this._Driver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriver_IdChanging(value);
					this.SendPropertyChanging();
					this._Driver_Id = value;
					this.SendPropertyChanged("Driver_Id");
					this.OnDriver_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_DrivingLicence", Storage="_Driver", ThisKey="Driver_Id", OtherKey="Driver_Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Driver Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				Driver previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.DrivingLicences.Remove(this);
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.DrivingLicences.Add(this);
						this._Driver_Id = value.Driver_Id;
					}
					else
					{
						this._Driver_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
